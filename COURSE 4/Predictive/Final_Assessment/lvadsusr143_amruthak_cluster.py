# -*- coding: utf-8 -*-
"""LVADSUSR143_AMRUTHAK_Cluster.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16rCX2d9CXNZjHrEPqDzL-rSy3oVK_WKx
"""

import pandas as pd
df=pd.read_csv('/content/customer_segmentation.csv')
df.head()

df.info()

df.isnull().sum()

import seaborn as sns
sns.displot(df['Income'])

# Handling missing values
df['Income']=df['Income'].fillna(df['Income'].mean())

df.isnull().sum()

df.duplicated().sum()

df.drop(['ID','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5','AcceptedCmp1','AcceptedCmp2'],axis=1)

#encoding
from sklearn.preprocessing import LabelEncoder
lbl_enc = LabelEncoder()
df['Education'] = lbl_enc.fit_transform(df['Education'])
df['Marital_Status'] = lbl_enc.fit_transform(df['Marital_Status'])
df['Dt_Customer'] = lbl_enc.fit_transform(df['Dt_Customer'])

#correlation analysis
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10,7))
sns.heatmap(df.corr(), annot=True, cmap='inferno')
plt.title('Correlation Heatmap')
plt.show()

# Elbow Method
from sklearn.cluster import KMeans
x = df.values
wcss_list = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(x)
    wcss_list.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss_list)
plt.title('The Elbow Method Graph')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Sum of squared distances')
plt.show()

# Clustering
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=42)
y_predict = kmeans.fit_predict(x)

# Silhouette Score
from sklearn.metrics import silhouette_score
silhouette_avg = silhouette_score(x, y_predict)
print("Silhouette Score:", silhouette_avg)

# Plot clusters
plt.scatter(x[y_predict == 0, 0], x[y_predict == 0, 1], s=100, c='blue', label='Cluster 1')
plt.scatter(x[y_predict == 1, 0], x[y_predict == 1, 1], s=100, c='green', label='Cluster 2')
plt.scatter(x[y_predict == 2, 0], x[y_predict == 2, 1], s=100, c='red', label='Cluster 3')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label='Centroid')
plt.title('Clusters of seeds')
plt.xlabel('Width of kernel')
plt.ylabel('Length of kernel')
plt.legend()
plt.show()

