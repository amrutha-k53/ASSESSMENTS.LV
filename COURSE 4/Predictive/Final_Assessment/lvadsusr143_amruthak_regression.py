# -*- coding: utf-8 -*-
"""LVADSUSR143_AMRUTHAK_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TQ8txeg4XnosdajC9WBbTTEeMtav8QLj
"""

import pandas as pd
df=pd.read_csv('/content/Fare prediction.csv')

df.head()

df.info()

df.describe()

df.columns

df.shape

df.nunique()

df.isnull().sum()

df.duplicated().sum()

#encoding
from sklearn.preprocessing import LabelEncoder
lbl_enc = LabelEncoder()
df['key'] = lbl_enc.fit_transform(df['key'])
df['pickup_datetime'] = lbl_enc.fit_transform(df['pickup_datetime'])

#correlation analysis
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10,7))
sns.heatmap(df.corr(), annot=True, cmap='inferno')
plt.title('Correlation Heatmap')
plt.show()

#normalization
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
cols = ['fare_amount','pickup_longitude','pickup_latitude','dropoff_longitude',
        'dropoff_latitude','passenger_count']
df[cols]= sc.fit_transform(df[cols])
df.head()

#feature selection
from sklearn.model_selection import train_test_split
#X=df.features()
X = df.drop(['pickup_longitude','pickup_latitude','dropoff_longitude',
        'dropoff_latitude'],axis=1)
y=df['fare_amount']

#train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

import xgboost as xgb
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import numpy as np

# Model evaluation
xgb_reg = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
xgb_reg.fit(X_train, y_train)
y_pred =xgb_reg.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"  MSE: {mse:.2f}")
print(f"  RMSE: {rmse:.2f}")
print(f"  MAE: {mae:.2f}")
print(f"  R2 Score: {r2:.2f}")
print()

# Visualize predictions vs actual values
xgb_reg.fit(X_train, y_train)
y_pred =xgb_reg.predict(X_test)
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Predictions vs Actual:")
plt.show()

