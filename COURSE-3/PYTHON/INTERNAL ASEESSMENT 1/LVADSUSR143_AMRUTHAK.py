# -*- coding: utf-8 -*-
"""IA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnULSCJNg8WWJ3Ar32iQ3i8YiAsLl2qR
"""

#1
import numpy as np
arr=np.array([1,2,3,4,5])
minimum=np.min(arr)
print(minimum)
maximum=np.max(arr)
print(maximum)
sum=np.sum(arr)
print(sum)
mean=np.mean(arr)
print(mean)
stddev=np.std(arr)
print(stddev)

#2
import numpy as np

def normalize_attributes(data):
    # Calculate the mean and standard deviation along the attribute axis (axis 0)
    mean = np.mean(data, axis=0)
    std_dev = np.std(data, axis=1)
    normalized_data = (data - mean) / std_dev
    return normalized_data

health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])  # height, weight, age for individual 3

normalized_data = normalize_attributes(health_data)
print(normalized_data)

#3
import numpy as np
scores = np.array([[10, 15],
                   [12, 18],
                   [8, 14]])

improvement = calculate_improvement(scores)
print("Improvement in performance for each athlete:")
print(improvement)

#4
import numpy as np
sensor_data = np.arange(15,25,24)
print(sensor_data)

#5
import numpy as np
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5

#6
NA

#7
import numpy as np
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])

#8
arr_2d = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])

# Define a condition (e.g., rows where the sum is greater than 10)
condition = np. > 10

# Use boolean indexing to select rows based on the condition
selected_rows = arr_2d[condition]

print("Original 2D array:")
print(arr_2d)
print("\nSelected rows based on condition:")
print(selected_rows)

#9

data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

import pandas as pd
df = pd.DataFrame(data)
filtered_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]
employees_list = filtered_df[['Name', 'City']].values.tolist()

print("List of employees under 45 not in HR department:")
print(employees_list)

#10
import pandas as pd
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}
df=pd.DataFrame(data)
df
avg_sales=df.groupby('Salesperson')['Sales'].mean()
sorted=avg_sales.sort_values(ascending=True)
rank_department=sorted.rank()
rank_department
#rank_sales=df.rank

#11
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)

# Filter products from the 'Fruit' category
fruit_df = df[df['Category'] == 'Fruit']

# Calculate the average price for the 'Fruit' category
average_price_fruit = fruit_df['Price'].mean()

# Identify products that are both above average price and not part of any promotion
potential_promotions = fruit_df[(fruit_df['Price'] > average_price_fruit) & (~fruit_df['Promotion'])]

print("Potential candidates for future promotions:")
print(potential_promotions)

#12
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

# Dataset of employee project assignments
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}
merged=
df.replace(np.nan,'NULL',inplace = True)

#13
import pandas as pd
sports_team_stats=pd.read_csv('/content/Q13_sports_team_stats.csv')
df=pd.DataFrame(sports_team_stats)
df.head()
#avg_score=df.groupby('GamesPlayed')['Wins'].mean()
#avg_score

#14
import pandas as pd
customer_purchases=pd.read_csv('/content/Q14_customer_purchases.csv')
df=pd.DataFrame(customer_purchases)
df.head()
df['Date']=

#15
import pandas as pd
student_grades=pd.read_csv('/content/Q15_student_grades.csv')
df=pd.DataFrame(student_grades)
df.head()
df.groupby('Subject')['Grade'].sum()

performance_trend=df['Subject']=='Grade'
performance_trend

